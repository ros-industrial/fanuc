-- Software License Agreement (BSD License)
--
-- Copyright (c) 2012, 2013, TU Delft Robotics Institute
-- All rights reserved.
--
-- Redistribution and use in source and binary forms, with or without
-- modification, are permitted provided that the following conditions
-- are met:
--
--  * Redistributions of source code must retain the above copyright
--    notice, this list of conditions and the following disclaimer.
--  * Redistributions in binary form must reproduce the above
--    copyright notice, this list of conditions and the following
--    disclaimer in the documentation and/or other materials provided
--    with the distribution.
--  * Neither the name of the TU Delft Robotics Institute nor the names 
--    of its contributors may be used to endorse or promote products 
--    derived from this software without specific prior written 
--    permission.
--
-- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-- "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-- LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
-- FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
-- COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
-- INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
-- BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
-- LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
-- CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
-- LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
-- ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
-- POSSIBILITY OF SUCH DAMAGE.



--------------------------------------------------------------------------------
-- 
-- libssock routine prototypes
-- 
-- author: G.A. vd. Hoorn (TU Delft Robotics Institute)
-- 
--------------------------------------------------------------------------------




--------------------------------------------------------------------------------
-- 
-- Ping a host on the network. No connected socket necessary.
-- 
-- NB: hostname needs to be known to robot (setup DNS and / or 'Host Entry 
--     table')
-- 
--------------------------------------------------------------------------------
ROUTINE ssock_ping(host : STRING) : INTEGER FROM libssock




--------------------------------------------------------------------------------
-- 
-- Constructor: sets up member variables and initialises related robot 
-- system variable.
-- 
--------------------------------------------------------------------------------
ROUTINE ssock_ctor(this : ssock_t; tcp_port : INTEGER; tag_idx : INTEGER) : INTEGER FROM libssock




--------------------------------------------------------------------------------
-- 
-- Dump string rep of the given instance to to file descriptor 'fd'.
-- 
--------------------------------------------------------------------------------
ROUTINE ssock_dump(this : ssock_t; fd : FILE) FROM libssock




--------------------------------------------------------------------------------
-- 
-- Wait for a connection on the given socket instance, if not already connected
-- 
--------------------------------------------------------------------------------
ROUTINE ssock_accept(this : ssock_t) : INTEGER FROM libssock




--------------------------------------------------------------------------------
-- 
-- Disconnect the socket, if connected.
-- 
--------------------------------------------------------------------------------
ROUTINE ssock_dconn(this : ssock_t) : INTEGER FROM libssock




--------------------------------------------------------------------------------
-- 
-- Open a file descriptor on the given socket instance
-- 
--------------------------------------------------------------------------------
ROUTINE ssock_ofd(this : ssock_t; fd : FILE; mode : STRING) : INTEGER FROM libssock




--------------------------------------------------------------------------------
-- 
-- Close the given file descriptor (on the given socket instance)
-- 
--------------------------------------------------------------------------------
ROUTINE ssock_cfd(this : ssock_t; fd : FILE) : INTEGER FROM libssock




--------------------------------------------------------------------------------
-- 
-- Disconnect the socket, unconditionally.
-- 
--------------------------------------------------------------------------------
ROUTINE ssock_dconnf(this : ssock_t) : INTEGER FROM libssock




--------------------------------------------------------------------------------
-- 
-- Wait for a connection on the given socket instance. If successful,
-- open given file descriptor on it.
-- 
--------------------------------------------------------------------------------
ROUTINE ssock_accpt2(this : ssock_t; fd : FILE) : INTEGER FROM libssock




--------------------------------------------------------------------------------
-- 
-- Disconnect the socket, if connected. Then close given file descriptor.
-- 
--------------------------------------------------------------------------------
ROUTINE ssock_dconn2(this : ssock_t; fd : FILE) : INTEGER FROM libssock
