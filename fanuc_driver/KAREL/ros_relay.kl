-- Software License Agreement (BSD License)
--
-- Copyright (c) 2012-2014, TU Delft Robotics Institute
-- All rights reserved.
--
-- Redistribution and use in source and binary forms, with or without
-- modification, are permitted provided that the following conditions
-- are met:
--
--  * Redistributions of source code must retain the above copyright
--    notice, this list of conditions and the following disclaimer.
--  * Redistributions in binary form must reproduce the above
--    copyright notice, this list of conditions and the following
--    disclaimer in the documentation and/or other materials provided
--    with the distribution.
--  * Neither the name of the TU Delft Robotics Institute nor the names 
--    of its contributors may be used to endorse or promote products 
--    derived from this software without specific prior written 
--    permission.
--
-- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-- "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-- LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
-- FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
-- COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
-- INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
-- BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
-- LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
-- CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
-- LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
-- ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
-- POSSIBILITY OF SUCH DAMAGE.


PROGRAM ros_relay
--------------------------------------------------------------------------------
-- 
-- ROS Industrial joint trajectory relay.
-- 
-- Currently only supports joint trajectory point streaming.
-- 
-- 
-- Assumptions:
--   - User Socket Messaging (USM) is supported by robot
--   - There is only 1 motion group
--   - The TP program 'ros_movesm' exists on the robot
-- 
-- 
-- Configuration defaults:
--   - TAG 'S4' used for USM
--   - Relay TCP port ROS-I default (11000)
--   - Position register 1 is available
--   - Integer registers 1 & 2 are available
--   - Flags 1 & 2 are available
--   - Joint motion speed is limited to 20%
--   - Motion termination is at CNT 50%
-- 
-- 
-- author: G.A. vd. Hoorn (TU Delft Robotics Institute)
-- 
--------------------------------------------------------------------------------
%ALPHABETIZE
%COMMENT = 'r22'
%NOBUSYLAMP
%NOLOCKGROUP
%NOPAUSE = COMMAND + TPENABLE + ERROR




--------------------------------------------------------------------------------
-- 
-- remote types & constants
-- 
--------------------------------------------------------------------------------
%INCLUDE libssock_t
%INCLUDE libind_pkt_t




--------------------------------------------------------------------------------
-- 
-- local types & constants
-- 
--------------------------------------------------------------------------------
TYPE
	rrelay_cfg_t = STRUCTURE
		checked      : BOOLEAN  -- user flagged: config checked
		f_msm_rdy    : INTEGER  -- flag used for 'motion sm ready' signal
		f_msm_drdy   : INTEGER  -- flag used for 'motion sm data ready' signal
		loop_hz      : INTEGER  -- main loop update rate (in Hz)
		move_cnt     : INTEGER  -- CNT to use for each motion instruction
		move_speed   : INTEGER  -- speed to use for each motion instruction
		pr_move      : INTEGER  -- pos reg to use for next traj pt
		r_move_spd   : INTEGER  -- int reg to store motion speed in
		r_move_cnt   : INTEGER  -- int reg to store motion CNT in
		s_tcp_nr     : INTEGER  -- TCP port to listen on
		s_tag_nr     : INTEGER  -- server TAG number to use
		um_clear     : BOOLEAN  -- clear user menu on start
	ENDSTRUCTURE


VAR
	cfg_         IN SHADOW : rrelay_cfg_t   -- configuration

	sock_                  : ssock_t
	sock_fd_               : FILE           -- file descriptor has to be declared here
	pkt_in_                : ind_pkt_t      -- incoming joint commands
	pkt_out_               : ind_pkt_t      -- outgoing reply msgs
	stat_                  : INTEGER
	sleep_time_            : INTEGER
	do_it_                 : BOOLEAN


CONST
	LOG_PFIX     = 'RREL '

	CFG_OK       =    0  -- config ok
	CFG_NOTDONE  =   -1  -- configuration not checked: user action required

	FILE_ILL_PRM =  2032 -- FILE-032 Illegal parameter
	HOST_CTAG_ER = 67144 -- HOST-144 Comm Tag error
	SEV_ABORT    =    2  -- ABORT severity

	MOVERR_OOR   =   -1  -- Requested JPOS is out-of-range

	-- Configuration defaults
	MOTION_TAG   =    4  -- Server tag
	MOTION_TCP_P = RI_TCP_TRAJR

	MOVE_SPEED   =   20  -- speed to use with ros_movesm (percentage of maximum)
	MOVE_CNT     =   50  -- CNT value to use with ros_movesm

	LOOP_HZ      =   40  -- Hz

	-- ros_movesm interface defaults:
	MOVE_PREG    =    1  -- position register for current point
	MOVE_SPD_REG =    1  -- integer register: motion speed (in %)
	MOVE_CNT_REG =    2  -- integer register: motion termination (in %)

	RI_MSM_RDY   =    1  -- ready signal flag
	RI_MSM_DRDY  =    2  -- data ready signal flag




--------------------------------------------------------------------------------
-- 
-- remote routine prototypes
-- 
--------------------------------------------------------------------------------
%INCLUDE libssock_h
%INCLUDE libind_pkt_h
%INCLUDE libind_log_h
%INCLUDE libind_mth_h




--------------------------------------------------------------------------------
-- 
-- local routine prototypes
-- 
--------------------------------------------------------------------------------
ROUTINE check_cfg_(cfg : rrelay_cfg_t) : INTEGER FROM ros_relay
ROUTINE exec_move_(pkt : ind_pkt_t; cfg : rrelay_cfg_t) : INTEGER FROM ros_relay
ROUTINE req_next_(pkt_in : ind_pkt_t; pkt_out : ind_pkt_t; sock_fd : FILE) : INTEGER FROM ros_relay
ROUTINE send_err_(pkt_in : ind_pkt_t; pkt_out : ind_pkt_t; sock_fd : FILE) : INTEGER FROM ros_relay




--------------------------------------------------------------------------------
-- 
-- Main program
-- 
--------------------------------------------------------------------------------
BEGIN
	-- check config
	stat_ = check_cfg_(cfg_)
	IF (stat_ <> CFG_OK) THEN
		log_error_a(LOG_PFIX + 'cfg error:', stat_)
		log_error(LOG_PFIX + 'check cfg')
		-- errors with config always force user to log window
		log_force
		POST_ERR(FILE_ILL_PRM, '', 0, SEV_ABORT)
		RETURN
	ENDIF


	-- init
	stat_       = 0
	sleep_time_ = ROUND(1000.0 / cfg_.loop_hz)
	do_it_      = TRUE


	-- enable log output
	IF (cfg_.um_clear) THEN log_clear; ENDIF


	-- init server socket
	stat_ = ssock_ctor(sock_, cfg_.s_tcp_nr , cfg_.s_tag_nr)
	IF (stat_ <> 0) THEN
		IF (stat_ = TAG_CONF_ERR) THEN
			log_error_a(LOG_PFIX + 'cfg err, TAG idx:', cfg_.s_tag_nr)
		ELSE
			log_error_a(LOG_PFIX + 'ssock_ctor err:', stat_)
		ENDIF
		-- nothing we can do, abort
		POST_ERR(HOST_CTAG_ER, '', 0, SEV_ABORT)
	ENDIF


	-- init incoming packet
	stat_ = ipkt_ctor(pkt_in_)


	-- init reply packet
	stat_ = ipkt_ctor(pkt_out_)
	-- setup fields: we reply with JOINT_POSITION packets
	USING pkt_out_ DO
		length_     = (RI_SZ_HDR + RI_SZB_JPOS)
		msg_type_   = RI_MT_JOINTP
		comm_type_  = RI_CT_SVCRPL -- TODO: is this the correct reply type?
		reply_type_ = RI_RT_SUCC
		-- rest is set by ctor
	ENDUSING


	-- make sure socket is closed
	-- don t care about result
	stat_ = ssock_dconnf(sock_)


	-- 
	WHILE (do_it_) DO

		-- inform user
		log_info(LOG_PFIX + 'Waiting for ROS traj relay')

		-- set socket in 'binary mode' (unformatted)
		-- KAREL Reference Manual, MARRC75KR07091E Rev C, sec 7.3.1
		SET_FILE_ATR(sock_fd_, ATR_UF)

		-- wait for connection
		stat_ = ssock_accpt2(sock_, sock_fd_)
		IF (stat_ <> 0) THEN
			log_error_a(LOG_PFIX + 'sock_accept err:', stat_)
			-- can't continue
			GOTO exit_discon
		ENDIF

		-- inform user
		log_info(LOG_PFIX + 'Connected')

		-- got client, start relay loop
		WHILE (do_it_) DO

			-- get new packet from the socket
			-- TODO: this assumes 1 packet per iteration (ok for now)
			stat_ = ipkt_checkfd(sock_fd_, pkt_in_)
			IF (stat_ < 0) THEN
				log_error_a(LOG_PFIX + 'check_socket err:', stat_)

				-- can't continue
				GOTO exit_discon
			ENDIF

			-- see if there were any packets
			IF (stat_ > 0) THEN

				-- check sequence number for special values
				IF (pkt_in_.seq_nr_ < 0) THEN
					-- 
					SELECT (pkt_in_.seq_nr_) OF
						-- 
						CASE (RI_SEQ_STRJD):
							log_info(LOG_PFIX + 'Download start')
							log_warn(LOG_PFIX + 'Trajectory downloading not supported')

						-- 
						CASE (RI_SEQ_STRJS):
							log_info(LOG_PFIX + 'Stream start')
							log_warn(LOG_PFIX + 'Trajectory stream start unhandled, ignoring point')

						-- 
						CASE (RI_SEQ_ETRAJ):
							log_info(LOG_PFIX + 'Trajectory end')
							log_warn(LOG_PFIX + 'Trajectory end unhandled, not supported')

						-- 
						CASE (RI_SEQ_STPRJ):
							log_info(LOG_PFIX + 'Trajectory stop')
							-- cancel motion (if any)
							CANCEL
							stat_ = req_next_(pkt_in_, pkt_out_, sock_fd_)
							IF stat_ <> 0 THEN
								-- can't continue
								log_error_a(LOG_PFIX + 'Failed to ack stop, err:', stat_)
								GOTO exit_discon
							ENDIF

						-- unknown special sequence nr
						ELSE:
							log_warn_a(LOG_PFIX + 'unknown seq nr:', pkt_in_.seq_nr_)
							log_warn(LOG_PFIX + 'please report')

					ENDSELECT


				ELSE

					-- notify ROS node we want a new trajectory node
					stat_ = req_next_(pkt_in_, pkt_out_, sock_fd_)
					IF (stat_ <> 0) THEN
						-- can't continue
						log_error_a(LOG_PFIX + 'req_next err:', stat_)
						GOTO exit_discon
					ENDIF

					-- 
					stat_ = exec_move_(pkt_in_, cfg_)
					IF (stat_ <> 0) THEN
						-- 
						log_error_a(LOG_PFIX + 'exec_move err:', stat_)
						-- can't continue, send error
						stat_ = send_err_(pkt_in_, pkt_out_, sock_fd_)
						-- disconnect if anything else than OOR error
						IF (stat_ <> MOVERR_OOR) THEN
							-- 
							GOTO exit_discon
						ENDIF
					ENDIF

				ENDIF

			ELSE
				-- no packets waiting; and no motion in progress,
				-- sleep a little (1/T)
				DELAY sleep_time_

			ENDIF

		-- inner WHILE TRUE DO
		ENDWHILE

		-- exit with forced disconnect
exit_discon::
		stat_ = ssock_dconn2(sock_, sock_fd_)

	-- outer WHILE TRUE DO
	ENDWHILE


exit_on_err::
	-- nothing

END ros_relay




ROUTINE check_cfg_
VAR
	a__ : BOOLEAN
BEGIN
	a__ = FALSE

	-- set defaults for any uninitialised entries
	IF (UNINIT(cfg.f_msm_rdy )) THEN cfg.f_msm_rdy  = RI_MSM_RDY  ; a__ = TRUE; ENDIF
	IF (UNINIT(cfg.f_msm_drdy)) THEN cfg.f_msm_drdy = RI_MSM_DRDY ; a__ = TRUE; ENDIF
	IF (UNINIT(cfg.loop_hz   )) THEN cfg.loop_hz    = LOOP_HZ     ; a__ = TRUE; ENDIF
	IF (UNINIT(cfg.move_cnt  )) THEN cfg.move_cnt   = MOVE_CNT    ; a__ = TRUE; ENDIF
	IF (UNINIT(cfg.move_speed)) THEN cfg.move_speed = MOVE_SPEED  ; a__ = TRUE; ENDIF
	IF (UNINIT(cfg.pr_move   )) THEN cfg.pr_move    = MOVE_PREG   ; a__ = TRUE; ENDIF
	IF (UNINIT(cfg.r_move_spd)) THEN cfg.r_move_spd = MOVE_SPD_REG; a__ = TRUE; ENDIF
	IF (UNINIT(cfg.r_move_cnt)) THEN cfg.r_move_cnt = MOVE_CNT_REG; a__ = TRUE; ENDIF
	IF (UNINIT(cfg.s_tcp_nr  )) THEN cfg.s_tcp_nr   = MOTION_TCP_P; a__ = TRUE; ENDIF
	IF (UNINIT(cfg.s_tag_nr  )) THEN cfg.s_tag_nr   = MOTION_TAG  ; a__ = TRUE; ENDIF
	IF (UNINIT(cfg.um_clear  )) THEN cfg.um_clear   = TRUE        ; a__ = TRUE; ENDIF
	IF (UNINIT(cfg.checked   )) THEN cfg.checked    = FALSE       ; a__ = TRUE; ENDIF

	-- make sure user has checked configuration
	IF ((NOT cfg.checked) OR a__) THEN RETURN (CFG_NOTDONE); ENDIF

	-- all ok
	RETURN (CFG_OK)
END check_cfg_




--------------------------------------------------------------------------------
-- 
-- Update joint positions according to contents of ROS Industrial packet.
-- 
-- This routine communicates the new joint positions to the 'Move SM' TPE 
-- program using the configured flags, and position & integer registers.
-- 
-- [in    ]  pkt     : packet containing new joint positions
-- [out   ]          :    0 IFF no error
--                       -1 IFF new position not reachable
--                     < -1 on any other error
-- 
--------------------------------------------------------------------------------
ROUTINE exec_move_
VAR
	stat__       : INTEGER
	new_j_pos__  : JOINTPOS
BEGIN
	-- ROS sends radians, so convert
	arr_rad2deg(pkt.joint_data_)

	-- convert reals to jointpos
	CNV_REL_JPOS(pkt.joint_data_, new_j_pos__, stat__)
	IF (stat__ <> 0) THEN RETURN (-stat__); ENDIF

	-- check to make sure point can be reached before performing motion
	IF (NOT J_IN_RANGE(new_j_pos__)) THEN
		RETURN (MOVERR_OOR)
	ENDIF

	-- sync
	WAIT FOR (FLG[cfg.f_msm_rdy] = ON)

	-- setup registers
	-- init position
	SET_JPOS_REG(cfg.pr_move, new_j_pos__, stat__)
	IF (stat__ <> 0) THEN RETURN (-stat__); ENDIF

	-- init motion speed (from config)
	SET_INT_REG(cfg.r_move_spd, cfg.move_speed, stat__)
	IF (stat__ <> 0) THEN RETURN (-stat__); ENDIF

	-- init motion termination (from config)
	SET_INT_REG(cfg.r_move_cnt, cfg.move_cnt, stat__)
	IF (stat__ <> 0) THEN RETURN (-stat__); ENDIF

	-- exec
	FLG[cfg.f_msm_drdy] = ON
	WAIT FOR (FLG[cfg.f_msm_drdy] = OFF)

	-- done
	RETURN (0)
END exec_move_




--------------------------------------------------------------------------------
-- 
-- Request next trajectory point from ROS node. Also sort of 'Send ACK'.
--
-- [in    ]  pkt_in  : the packet received
-- [in    ]  pkt_out : the packet to send
-- [in    ]  sock_fd : file descriptor on the open socket
-- [out   ]          : 0 IFF no error
-- 
--------------------------------------------------------------------------------
ROUTINE req_next_
VAR
	stat__ : INTEGER
BEGIN
	-- 
	stat__ = 0

	-- copy seq_nr from packet we ack (done as a debugging aid)
	pkt_out.seq_nr_ = pkt_in.seq_nr_
	pkt_out.reply_type_ = RI_RT_SUCC

	-- send ROS node request for next point
	stat__ = ipkt_srlise(pkt_out, sock_fd)

	-- done
	RETURN (-ABS(stat__))
END req_next_




--------------------------------------------------------------------------------
-- 
-- Send NACK to ROS node. Something erred
--
-- [in    ]  pkt_in  : the packet received
-- [in    ]  pkt_out : the packet to send
-- [in    ]  sock_fd : file descriptor on the open socket
-- [out   ]          : 0 IFF no error
-- 
--------------------------------------------------------------------------------
ROUTINE send_err_
VAR
	stat__ : INTEGER
BEGIN
	-- 
	stat__ = 0

	-- copy seq_nr from the packet we NACK (done as a debugging aid)
	pkt_out.seq_nr_     = pkt_in.seq_nr_
	pkt_out.reply_type_ = RI_RT_FAIL

	-- send nack to ROS node
	stat__ = ipkt_srlise(pkt_out, sock_fd)

	-- done
	RETURN (-ABS(stat__))
END send_err_
