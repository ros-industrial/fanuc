-- Software License Agreement (BSD License)
--
-- Copyright (c) 2012, 2013, TU Delft Robotics Institute
-- All rights reserved.
--
-- Redistribution and use in source and binary forms, with or without
-- modification, are permitted provided that the following conditions
-- are met:
--
--  * Redistributions of source code must retain the above copyright
--    notice, this list of conditions and the following disclaimer.
--  * Redistributions in binary form must reproduce the above
--    copyright notice, this list of conditions and the following
--    disclaimer in the documentation and/or other materials provided
--    with the distribution.
--  * Neither the name of the TU Delft Robotics Institute nor the names 
--    of its contributors may be used to endorse or promote products 
--    derived from this software without specific prior written 
--    permission.
--
-- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-- "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-- LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
-- FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
-- COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
-- INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
-- BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
-- LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
-- CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
-- LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
-- ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
-- POSSIBILITY OF SUCH DAMAGE.


PROGRAM ros_state
--------------------------------------------------------------------------------
-- 
-- ROS Industrial state proxy
-- 
-- 
-- Assumptions:
--   - User Socket Messaging (USM) is supported by robot
--   - TAG 'S3' used for USM
--   - There is only 1 motion group
-- 
-- 
-- author: G.A. vd. Hoorn (TU Delft Robotics Institute)
-- 
--------------------------------------------------------------------------------
%ALPHABETIZE
%COMMENT = 'r15'
%NOBUSYLAMP
%NOLOCKGROUP
%NOPAUSE = COMMAND + TPENABLE + ERROR




--------------------------------------------------------------------------------
-- 
-- remote types & constants
-- 
--------------------------------------------------------------------------------
%INCLUDE libssock_t
%INCLUDE libind_pkt_t
%INCLUDE libind_rs_t




--------------------------------------------------------------------------------
-- 
-- local types & constants
-- 
--------------------------------------------------------------------------------
VAR
	jnt_pkt_out: ind_pkt_t   -- ROS industrial joint state packet
	rs_pkt_out : ind_rs_t    -- ROS industrial robot status packet
	sock_      : ssock_t     -- server socket instance
	sock_fd_   : FILE        -- file descriptor associated with srvr socket
	stat_      : INTEGER     -- status variable
	stat_count_: INTEGER     -- status loop counter
	cur_j_pos  : JOINTPOS    -- current position of robot joints
	sleep_time : INTEGER


CONST
	-- 
	LOG_PFIX = 'RSTA '
	-- which server tag to use
	STATE_TAG = 3
	-- Main loop freq (Hz)
	LOOP_HZ = 40
	-- Number of main loop iterations for each status message
	STAT_LP_CNT = 10




--------------------------------------------------------------------------------
-- 
-- remote routine prototypes
-- 
--------------------------------------------------------------------------------
%INCLUDE libssock_h
%INCLUDE libind_pkt_h
%INCLUDE libind_hdr_h
%INCLUDE libind_log_h
%INCLUDE libind_mth_h
%INCLUDE libind_rs_h




--------------------------------------------------------------------------------
-- 
-- Main program
-- 
--------------------------------------------------------------------------------
BEGIN
	stat_       = 0
	stat_count_ = 0
	sleep_time  = ROUND(1000.0 / LOOP_HZ)


	-- enable log output
	log_clear


	-- init packet
	stat_ = ipkt_ctor(jnt_pkt_out)
	-- we reply with JOINT_POSITION packets
	USING jnt_pkt_out DO
		length_    = (RI_SZ_HDR + RI_SZB_JPOS)
		msg_type_  = RI_MT_JOINTP
		comm_type_ = RI_CT_TOPIC
		-- rest is set by ctor
	ENDUSING


	-- init server socket
	stat_ = ssock_ctor(sock_, RI_TCP_STATE, STATE_TAG)
	IF (stat_ <> 0) THEN
		IF (stat_ = TAG_CONF_ERR) THEN
			log_error_a(LOG_PFIX + 'TAG config error. TAG nr:', STATE_TAG)
		ELSE
			log_error_a(LOG_PFIX + 'ssock_ctor err:', stat_)
		ENDIF
		-- nothing we can do, abort
		GOTO exit_on_err
	ENDIF


	-- make sure socket is closed
	-- don t care about result
	stat_ = ssock_dconnf(sock_)

	-- 
	WHILE (TRUE) DO

		-- inform user
		log_info(LOG_PFIX + 'Waiting for ROS state proxy')

		-- set socket in 'binary mode' (unformatted)
		-- KAREL Reference Manual, MARRC75KR07091E Rev C, sec 7.3.1
		SET_FILE_ATR(sock_fd_, ATR_UF)

		-- wait for connection
		stat_ = ssock_accpt2(sock_, sock_fd_)
		IF (stat_ <> 0) THEN
			log_error_a(LOG_PFIX + 'sock_accept err:', stat_)
			-- can't continue
			GOTO exit_discon
		ENDIF

		-- inform user
		log_info(LOG_PFIX + 'Connected')

		-- got client, start joint_state relay loop
		WHILE (TRUE) DO

			-- get current joint angles
			cur_j_pos = CURJPOS(0, 0)

			-- convert to REAL array
			CNV_JPOS_REL(cur_j_pos, jnt_pkt_out.joint_data_, stat_)

			-- ROS expects radians, so convert
			arr_deg2rad(jnt_pkt_out.joint_data_)

			-- serialise packet, write to socket file descriptor
			stat_ = ipkt_srlise(jnt_pkt_out, sock_fd_)

			-- check result
			IF (stat_ <> 0) THEN
				-- 
				log_error_a(LOG_PFIX + 'jnt_pkt_srlise err:', stat_)

				-- remote probably disconnected
				stat_ = ssock_dconn2(sock_, sock_fd_)

				-- exit inner loop
				GOTO exit_inner
			ENDIF

			-- 
			IF (stat_count_ >=  STAT_LP_CNT) THEN
				--Build up robot status packer
				irs_update(rs_pkt_out)

				-- serialise packet, write to socket file descriptor
				stat_ = irs_tpc_srl(rs_pkt_out, sock_fd_)

				-- check result
				IF (stat_ <> 0) THEN
					-- 
					log_error_a(LOG_PFIX + 'rs_pkt_srlise err:', stat_)

					-- remote probably disconnected
					stat_ = ssock_dconn2(sock_, sock_fd_)

					-- exit inner loop
					GOTO exit_inner
				ENDIF

				stat_count_ = 0
			ELSE
				stat_count_ = stat_count_ + 1
			ENDIF

			-- sleep a little (1/T)
			DELAY sleep_time

		-- inner WHILE TRUE DO
		ENDWHILE

		-- exit with forced disconnect
		exit_discon::
			stat_ = ssock_dconn2(sock_, sock_fd_)

		-- exit inner loop
		exit_inner::
			-- nothing

	-- outer WHILE TRUE DO
	ENDWHILE


exit_on_err::
	-- nothing

END ros_state
