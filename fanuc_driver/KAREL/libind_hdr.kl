-- Software License Agreement (BSD License)
--
-- Copyright (c) 2013, Southwest Research Institute
-- All rights reserved.
--
-- Redistribution and use in source and binary forms, with or without
-- modification, are permitted provided that the following conditions
-- are met:
--
--  * Redistributions of source code must retain the above copyright
--    notice, this list of conditions and the following disclaimer.
--  * Redistributions in binary form must reproduce the above
--    copyright notice, this list of conditions and the following
--    disclaimer in the documentation and/or other materials provided
--    with the distribution.
--  * Neither the name of the Southwest Research Institute nor the names 
--    of its contributors may be used to endorse or promote products 
--    derived from this software without specific prior written 
--    permission.
--
-- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-- "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-- LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
-- FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
-- COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
-- INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
-- BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
-- LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
-- CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
-- LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
-- ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
-- POSSIBILITY OF SUCH DAMAGE.


PROGRAM libind_hdr
--------------------------------------------------------------------------------
-- 
-- Library routines for creating / processing ROS Industrial header packets
-- 
-- 
-- author: Shaun Edwards (Southwest Research Institute)
-- author: G.A. vd. Hoorn (TU Delft Robotics Institute)
-- 
--------------------------------------------------------------------------------
%NOLOCKGROUP
%NOPAUSE= COMMAND + TPENABLE + ERROR
%COMMENT = 'r1'




--------------------------------------------------------------------------------
-- 
-- local types & constants
-- 
--------------------------------------------------------------------------------
%INCLUDE libind_hdr_t
%INCLUDE libind_pkt_t
%INCLUDE ktype_sz_t




--------------------------------------------------------------------------------
-- 
-- remote routine prototypes
-- 
--------------------------------------------------------------------------------




--------------------------------------------------------------------------------
-- 
-- local routine prototypes
-- 
--------------------------------------------------------------------------------
%INCLUDE libind_hdr_h




--------------------------------------------------------------------------------
-- 
-- Empty body
-- 
--------------------------------------------------------------------------------
BEGIN
END libind_hdr




ROUTINE ihdr_ctor
BEGIN
	ihdr_reset(this)
END ihdr_ctor




ROUTINE ihdr_reset
BEGIN
	USING this DO
		length_     = 0
		msg_type_   = RI_MT_INVAL
		comm_type_  = RI_CT_INVAL
		reply_type_ = RI_RT_INVAL
	ENDUSING
END ihdr_reset




ROUTINE ihdr_srlise
VAR
	stat__ : INTEGER
BEGIN
	--
	stat__ = 0

	-- set packet length to atleast the header
	-- (TODO: not sure this is the correct action)
	IF (this.length_ < RI_SZ_HDR) THEN
		this.length_ = RI_SZ_HDR
	ENDIF

	-- write out all fields ..
	WRITE fd(this.length_,
		this.msg_type_,
		this.comm_type_,
		this.reply_type_)

	stat__ = IO_STATUS(fd)

	RETURN (-stat__)
END ihdr_srlise




ROUTINE ihdr_dsrlse
VAR
	stat__ : INTEGER
BEGIN
	--
	stat__ = 0

	-- read in all fields ..
	READ fd(this.length_,
		this.msg_type_,
		this.comm_type_,
		this.reply_type_)

	-- done
	stat__ = IO_STATUS(fd)
	RETURN (-stat__)
END ihdr_dsrlse




ROUTINE ihdr_tostr
VAR
	len_str__ : STRING[20]
	mt_str__  : STRING[20]
	ct_str__  : STRING[20]
	rt_str__  : STRING[20]
BEGIN
	-- TODO: check for 'uninitialised' data and handle 
	--       those (add 'unknown' or something)
	CNV_INT_STR(this.length_     , 1, 10, len_str__)
	CNV_INT_STR(this.msg_type_   , 1, 10, mt_str__)
	CNV_INT_STR(this.comm_type_  , 1, 10, ct_str__)
	CNV_INT_STR(this.reply_type_ , 1, 10, rt_str__)

	-- done
	RETURN ('h(lmcr):' + len_str__ + ';' + mt_str__ + ';' &
		+ ct_str__ + ';' + rt_str__ )
END ihdr_tostr




ROUTINE ihdr_dump
BEGIN
	WRITE fd(ihdr_tostr(this), CR)
END ihdr_dump
